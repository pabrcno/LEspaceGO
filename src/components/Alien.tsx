/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useMemo, useRef, useState } from "react";
import { Float, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

import { useFrame } from "@react-three/fiber";
import { Explosion } from "./Explosion";
import { a, useSpring } from "@react-spring/three";
import { LegoRing } from "./LegoRing";

type GLTFResult = GLTF & {
  nodes: {
    Object_1: THREE.Mesh;
    Object_1_1: THREE.Mesh;
    Object_1_2: THREE.Mesh;
  };
  materials: {
    DarkMetal: THREE.MeshStandardMaterial;
    LightMEtal: THREE.MeshStandardMaterial;
    Glass: THREE.MeshStandardMaterial;
  };
};

export function Alien(
  props: JSX.IntrinsicElements["group"] & { handleAlienHit: () => void }
) {
  const { nodes, materials } = useGLTF("/alien.glb") as GLTFResult;
  const [isHit, setIsHit] = useState(false);
  const alienRef = useRef<THREE.Group>();
  const raycaster = new THREE.Raycaster();
  const { alienScale, explosionScale } = useSpring({
    alienScale: isHit ? [0, 0, 0] : [1, 1, 1], // Shrinking effect
    explosionScale: isHit ? [1, 1, 1] : [0, 0, 0], // Explosion effect
    config: { duration: 150 }, // Duration of animation
  });
  const explosionAudio = useMemo(() => new Audio("/explosion.wav"), []);
  explosionAudio.volume = 0.5;

  useFrame(({ scene, camera }) => {
    // If already hit, no need to check further
    if (isHit) return;

    if (alienRef.current) {
      const lasers = scene.children.filter((child) => child.name === "laser"); // Name your lasers 'laser' when creating them for easy filtering
      for (const laser of lasers) {
        raycaster.set(laser.position, new THREE.Vector3(0, 0, -1));
        const intersects = raycaster.intersectObject(alienRef.current, true); // true checks all children of the group
        if (intersects.length > 0 && intersects[0].distance < 0.1) {
          explosionAudio.play().catch((err) => console.error(err));
          setIsHit(true);

          scene.remove(laser);

          props.handleAlienHit();
          setTimeout(() => {
            if (!alienRef.current) return;

            alienRef.current.visible = false;
            alienRef.current.position.set(0, 0, camera.position.z - 40);
          }, 2000);

          setTimeout(() => {
            if (!alienRef.current) return;

            alienRef.current.visible = true;
            setIsHit(false);
          }, 2500);

          break;
        }
      }
    }
  });

  return (
    <group {...props} dispose={null} ref={alienRef as React.Ref<THREE.Group>}>
      <a.group scale={alienScale as unknown as THREE.Vector3}>
        <mesh
          geometry={nodes.Object_1.geometry}
          material={materials.DarkMetal}
        />
        <mesh
          geometry={nodes.Object_1_1.geometry}
          material={materials.LightMEtal}
        />
        <mesh geometry={nodes.Object_1_2.geometry} material={materials.Glass} />
      </a.group>
      <a.group scale={explosionScale as unknown as THREE.Vector3}>
        <Float>
          <LegoRing
            amount={5}
            radius={2.5}
            rotationSpeed={0.01}
            color="gray"
            scale={[0.5, 0.5, 0.5]}
          />
        </Float>
        <Explosion />
      </a.group>
    </group>
  );
}

useGLTF.preload("/alien.glb");
